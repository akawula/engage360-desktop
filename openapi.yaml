openapi: 3.0.3
info:
  title: Engage360 API
  version: 1.0.0
  description: API for Engage360 - a comprehensive engagement and relationship management platform

servers:
  - url: http://45.86.33.25:2137/api
    description: Development server

paths:
  # People endpoints
  /people:
    get:
      summary: Get all people
      operationId: getPeople
      tags:
        - People
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of people
          content:
            application/json:
              schema:
                type: object
                properties:
                  people:
                    type: array
                    items:
                      $ref: '#/components/schemas/Person'
                  total:
                    type: integer
    post:
      summary: Create a new person
      operationId: createPerson
      tags:
        - People
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePersonRequest'
      responses:
        '201':
          description: Person created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'

  /people/{personId}:
    get:
      summary: Get person by ID
      operationId: getPersonById
      tags:
        - People
      parameters:
        - name: personId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Person details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
    put:
      summary: Update person
      operationId: updatePerson
      tags:
        - People
      parameters:
        - name: personId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePersonRequest'
      responses:
        '200':
          description: Person updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
    delete:
      summary: Delete person
      operationId: deletePerson
      tags:
        - People
      parameters:
        - name: personId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Person deleted

  # Groups endpoints
  /groups:
    get:
      summary: Get all groups
      operationId: getGroups
      tags:
        - Groups
      responses:
        '200':
          description: List of groups
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
    post:
      summary: Create a new group
      operationId: createGroup
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
      responses:
        '201':
          description: Group created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'

  /groups/{groupId}:
    get:
      summary: Get group by ID
      operationId: getGroupById
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    put:
      summary: Update group
      operationId: updateGroup
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
      responses:
        '200':
          description: Group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'

  /groups/{groupId}/members:
    get:
      summary: Get group members
      operationId: getGroupMembers
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
    post:
      summary: Add member to group
      operationId: addGroupMember
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                personId:
                  type: string
      responses:
        '201':
          description: Member added

  # Notes endpoints
  /notes:
    get:
      summary: Get all notes
      operationId: getNotes
      tags:
        - Notes
      parameters:
        - name: personId
          in: query
          schema:
            type: string
        - name: groupId
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
    post:
      summary: Create a new note
      operationId: createNote
      tags:
        - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNoteRequest'
      responses:
        '201':
          description: Note created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'

  /notes/{noteId}:
    get:
      summary: Get note by ID
      operationId: getNoteById
      tags:
        - Notes
      parameters:
        - name: noteId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Note details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
    put:
      summary: Update note
      operationId: updateNote
      tags:
        - Notes
      parameters:
        - name: noteId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNoteRequest'
      responses:
        '200':
          description: Note updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'

  # Action Items endpoints
  /action-items:
    get:
      summary: Get all action items
      operationId: getActionItems
      tags:
        - ActionItems
      parameters:
        - name: assigneeId
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, in_progress, completed, cancelled]
      responses:
        '200':
          description: List of action items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActionItem'
    post:
      summary: Create a new action item
      operationId: createActionItem
      tags:
        - ActionItems
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateActionItemRequest'
      responses:
        '201':
          description: Action item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionItem'

  /action-items/{actionItemId}:
    get:
      summary: Get action item by ID
      operationId: getActionItemById
      tags:
        - ActionItems
      parameters:
        - name: actionItemId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Action item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionItem'
    put:
      summary: Update action item
      operationId: updateActionItem
      tags:
        - ActionItems
      parameters:
        - name: actionItemId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateActionItemRequest'
      responses:
        '200':
          description: Action item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionItem'

  # Devices endpoints
  /devices:
    get:
      summary: Get all devices
      operationId: getDevices
      tags:
        - Devices
      responses:
        '200':
          description: List of devices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
    post:
      summary: Register a new device
      operationId: registerDevice
      tags:
        - Devices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDeviceRequest'
      responses:
        '201':
          description: Device registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'

  # User Profile endpoints
  /profile:
    get:
      summary: Get user profile
      operationId: getUserProfile
      tags:
        - Profile
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
    put:
      summary: Update user profile
      operationId: updateUserProfile
      tags:
        - Profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

components:
  schemas:
    Person:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        avatar:
          type: string
        company:
          type: string
        position:
          type: string
        tags:
          type: array
          items:
            type: string
        lastInteraction:
          type: string
          format: date-time
        engagementScore:
          type: number
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreatePersonRequest:
      type: object
      required:
        - firstName
        - lastName
        - email
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        company:
          type: string
        position:
          type: string
        tags:
          type: array
          items:
            type: string

    UpdatePersonRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        company:
          type: string
        position:
          type: string
        tags:
          type: array
          items:
            type: string

    Group:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [team, project, customer, interest]
        members:
          type: array
          items:
            $ref: '#/components/schemas/Person'
        memberCount:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateGroupRequest:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [team, project, customer, interest]

    UpdateGroupRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: [team, project, customer, interest]

    Note:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        type:
          type: string
          enum: [meeting, call, email, personal, follow_up]
        personId:
          type: string
        groupId:
          type: string
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateNoteRequest:
      type: object
      required:
        - title
        - content
        - type
      properties:
        title:
          type: string
        content:
          type: string
        type:
          type: string
          enum: [meeting, call, email, personal, follow_up]
        personId:
          type: string
        groupId:
          type: string
        tags:
          type: array
          items:
            type: string

    UpdateNoteRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        type:
          type: string
          enum: [meeting, call, email, personal, follow_up]
        tags:
          type: array
          items:
            type: string

    ActionItem:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, in_progress, completed, cancelled]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        assigneeId:
          type: string
        assigneeName:
          type: string
        dueDate:
          type: string
          format: date
        personId:
          type: string
        groupId:
          type: string
        noteId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateActionItemRequest:
      type: object
      required:
        - title
        - assigneeId
      properties:
        title:
          type: string
        description:
          type: string
        priority:
          type: string
          enum: [low, medium, high, urgent]
        assigneeId:
          type: string
        dueDate:
          type: string
          format: date
        personId:
          type: string
        groupId:
          type: string
        noteId:
          type: string

    UpdateActionItemRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, in_progress, completed, cancelled]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        assigneeId:
          type: string
        dueDate:
          type: string
          format: date

    Device:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [desktop, mobile, tablet]
        platform:
          type: string
        version:
          type: string
        lastSeen:
          type: string
          format: date-time
        isActive:
          type: boolean
        registeredAt:
          type: string
          format: date-time

    RegisterDeviceRequest:
      type: object
      required:
        - name
        - type
        - platform
      properties:
        name:
          type: string
        type:
          type: string
          enum: [desktop, mobile, tablet]
        platform:
          type: string
        version:
          type: string

    UserProfile:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        avatar:
          type: string
        company:
          type: string
        position:
          type: string
        timezone:
          type: string
        preferences:
          type: object
          properties:
            theme:
              type: string
              enum: [light, dark, auto]
            notifications:
              type: object
              properties:
                email:
                  type: boolean
                push:
                  type: boolean
                actionItems:
                  type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UpdateUserProfileRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        company:
          type: string
        position:
          type: string
        timezone:
          type: string
        preferences:
          type: object
          properties:
            theme:
              type: string
              enum: [light, dark, auto]
            notifications:
              type: object
              properties:
                email:
                  type: boolean
                push:
                  type: boolean
                actionItems:
                  type: boolean
